//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputActionsMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActionsMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActionsMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActionsMap"",
    ""maps"": [
        {
            ""name"": ""PlayerControllInput"",
            ""id"": ""1240fb0c-8b1a-4f52-8a36-ba202fefc26b"",
            ""actions"": [
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""5355c923-2e07-4b9e-9d0a-0987aed26623"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""d29c36f8-9baa-4bd6-aadc-f5b8426109e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RestartAction"",
                    ""type"": ""Button"",
                    ""id"": ""5086d468-e30a-4081-a4ab-eab4d064b0b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""daee789b-83e9-4079-8117-5946f5628ca2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78cc711e-e496-4a24-9442-2774c8a5cffb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7046fbc-c0a3-4e86-b17c-96bc245205a7"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControllInput
        m_PlayerControllInput = asset.FindActionMap("PlayerControllInput", throwIfNotFound: true);
        m_PlayerControllInput_LeftClick = m_PlayerControllInput.FindAction("LeftClick", throwIfNotFound: true);
        m_PlayerControllInput_RightClick = m_PlayerControllInput.FindAction("RightClick", throwIfNotFound: true);
        m_PlayerControllInput_RestartAction = m_PlayerControllInput.FindAction("RestartAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControllInput
    private readonly InputActionMap m_PlayerControllInput;
    private List<IPlayerControllInputActions> m_PlayerControllInputActionsCallbackInterfaces = new List<IPlayerControllInputActions>();
    private readonly InputAction m_PlayerControllInput_LeftClick;
    private readonly InputAction m_PlayerControllInput_RightClick;
    private readonly InputAction m_PlayerControllInput_RestartAction;
    public struct PlayerControllInputActions
    {
        private @PlayerInputActionsMap m_Wrapper;
        public PlayerControllInputActions(@PlayerInputActionsMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftClick => m_Wrapper.m_PlayerControllInput_LeftClick;
        public InputAction @RightClick => m_Wrapper.m_PlayerControllInput_RightClick;
        public InputAction @RestartAction => m_Wrapper.m_PlayerControllInput_RestartAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControllInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllInputActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControllInputActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControllInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControllInputActionsCallbackInterfaces.Add(instance);
            @LeftClick.started += instance.OnLeftClick;
            @LeftClick.performed += instance.OnLeftClick;
            @LeftClick.canceled += instance.OnLeftClick;
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @RestartAction.started += instance.OnRestartAction;
            @RestartAction.performed += instance.OnRestartAction;
            @RestartAction.canceled += instance.OnRestartAction;
        }

        private void UnregisterCallbacks(IPlayerControllInputActions instance)
        {
            @LeftClick.started -= instance.OnLeftClick;
            @LeftClick.performed -= instance.OnLeftClick;
            @LeftClick.canceled -= instance.OnLeftClick;
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @RestartAction.started -= instance.OnRestartAction;
            @RestartAction.performed -= instance.OnRestartAction;
            @RestartAction.canceled -= instance.OnRestartAction;
        }

        public void RemoveCallbacks(IPlayerControllInputActions instance)
        {
            if (m_Wrapper.m_PlayerControllInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControllInputActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControllInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControllInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControllInputActions @PlayerControllInput => new PlayerControllInputActions(this);
    public interface IPlayerControllInputActions
    {
        void OnLeftClick(InputAction.CallbackContext context);
        void OnRightClick(InputAction.CallbackContext context);
        void OnRestartAction(InputAction.CallbackContext context);
    }
}
